/**
 * Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°± Ï¢ÖÎ™©Îì§ 1ÎÖÑÏπò ÌòÑÏã§Ï†ÅÏù∏ Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (2Ï∞®)
 * LG, HDÌòÑÎåÄÏ§ëÍ≥µÏóÖ, ÏïÑÎßàÏ°¥, ÏùºÎùºÏù¥Î¶¥Î¶¨, Î©îÌÉÄ, LGÏóêÎÑàÏßÄÏÜîÎ£®ÏÖò, Ïú†ÎÇòÏù¥Ìã∞ÎìúÌó¨Ïä§Í∑∏Î£π, Ïπ¥Ïπ¥Ïò§, JPÎ™®Í±¥Ï≤¥Ïù¥Ïä§
 */

const Database = require('better-sqlite3');
const db = new Database('database.db');

// Disable foreign key constraints to avoid issues
db.pragma('foreign_keys = OFF');

// 2024ÎÖÑ 8Ïõî Í∏∞Ï§Ä Ïã§Ï†ú ÏãúÏû• Í∞ÄÍ≤© (2Ï∞® ÎàÑÎùΩ Ï¢ÖÎ™©Îì§)
const REALISTIC_START_PRICES_BATCH_2 = {
  // ÎØ∏Íµ≠ ÎåÄÌòïÏ£ºÎì§
  'HD': 385.50,              // HDÌòÑÎåÄÏ§ëÍ≥µÏóÖ (Ï§ëÍ≥µÏóÖ Î∞è ÏóêÎÑàÏßÄ)
  'AMZN': 175.80,            // ÏïÑÎßàÏ°¥ (Ïù¥Ïª§Î®∏Ïä§/ÌÅ¥ÎùºÏö∞Îìú ÎåÄÍ∏∞ÏóÖ)
  'LLY': 925.40,             // ÏùºÎùºÏù¥Î¶¥Î¶¨ (ÎãπÎá®Î≥ë ÏπòÎ£åÏ†ú Ïò§Ï†¨ÌîΩ Í≤ΩÏüÅÏÇ¨)
  'META': 520.30,            // Î©îÌÉÄ (ÌéòÏù¥Ïä§Î∂Å, Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Î™®ÌöåÏÇ¨)
  'UNH': 580.20,             // Ïú†ÎÇòÏù¥Ìã∞ÎìúÌó¨Ïä§Í∑∏Î£π (ÎØ∏Íµ≠ ÏµúÎåÄ Î≥¥ÌóòÏÇ¨)
  'JPM': 205.60,             // JPÎ™®Í±¥Ï≤¥Ïù¥Ïä§ (ÎØ∏Íµ≠ 1ÏúÑ Ìà¨ÏûêÏùÄÌñâ)
  
  // ÌïúÍµ≠ Ï£ºÏãùÎì§
  '003550': 72100,           // LG (ÏõêÌôî) - ÏÉùÌôúÍ±¥Í∞ï/Ï†ÑÏûê/ÌôîÌïô Í∑∏Î£π
  '373220': 410000,          // LGÏóêÎÑàÏßÄÏÜîÎ£®ÏÖò (ÏõêÌôî) - Î∞∞ÌÑ∞Î¶¨ ÎåÄÍ∏∞ÏóÖ
  '035720': 45500,           // Ïπ¥Ïπ¥Ïò§ (ÏõêÌôî) - Íµ≠ÎÇ¥ IT ÌîåÎû´Ìèº ÎåÄÍ∏∞ÏóÖ
};

// ÏãúÏû•Î≥Ñ Î≥ÄÎèôÏÑ± Ìå®ÌÑ¥ (Í∏∞Ï°¥Í≥º ÎèôÏùº)
const VOLATILITY_PATTERNS = {
  'KOSPI': { daily: 0.025, weekly: 0.08, monthly: 0.15 },
  'KOSDAQ': { daily: 0.035, weekly: 0.12, monthly: 0.22 },
  'NASDAQ': { daily: 0.030, weekly: 0.10, monthly: 0.18 },
  'NYSE': { daily: 0.020, weekly: 0.07, monthly: 0.12 },
  'null': { daily: 0.025, weekly: 0.08, monthly: 0.15 }
};

function getMarketVolatility(market) {
  return VOLATILITY_PATTERNS[market] || VOLATILITY_PATTERNS['null'];
}

function insertStockPrice(ticker, date, openPrice, highPrice, lowPrice, closePrice, volume = 0) {
  const stmt = db.prepare(`
    INSERT OR REPLACE INTO stock_prices (
      ticker, date, open_price, high_price, low_price, close_price, volume, adjusted_close
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
  `);
  
  try {
    stmt.run(ticker, date, openPrice, highPrice, lowPrice, closePrice, volume, closePrice);
    return true;
  } catch (error) {
    console.error(`‚ùå ${ticker} ${date} ÏÇΩÏûÖ Ïã§Ìå®:`, error.message);
    return false;
  }
}

function generateRealisticPriceData(ticker, market, startPrice, days = 365) {
  console.log(`üìà ${ticker} (${market}): ${days}ÏùºÏπò ÌòÑÏã§Ï†Å Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏãúÏûëÍ∞Ä: ${startPrice}`);
  
  const volatility = getMarketVolatility(market);
  let currentPrice = startPrice;
  let successCount = 0;
  
  // Ï†ÑÏ≤¥Ï†ÅÏù∏ Ïó∞Í∞Ñ Ï∂îÏÑ∏ ÏÑ§Ï†ï (-25% ~ +40% ÏÇ¨Ïù¥ ÎûúÎç§)
  const yearlyTrend = (Math.random() - 0.35) * 0.65; // -25% ~ +40%
  const dailyTrend = yearlyTrend / days;
  
  for (let i = days - 1; i >= 0; i--) {
    const date = new Date();
    date.setDate(date.getDate() - i);
    const dateStr = date.toISOString().split('T')[0];
    
    // ÏùºÏùº Î≥ÄÎèô Í≥ÑÏÇ∞ (Ï∂îÏÑ∏ + ÎûúÎç§ ÎÖ∏Ïù¥Ï¶à)
    const trendChange = dailyTrend;
    const randomNoise = (Math.random() - 0.5) * volatility.daily * 2;
    const totalChange = trendChange + randomNoise;
    
    const openPrice = currentPrice;
    const closePrice = currentPrice * (1 + totalChange);
    
    // ÏùºÏ§ë Í≥†Ï†ÄÍ∞Ä Í≥ÑÏÇ∞
    const intraday_volatility = volatility.daily * 0.5;
    const dayRange = Math.abs(closePrice - openPrice) + (Math.random() * intraday_volatility * currentPrice);
    
    const highPrice = Math.max(openPrice, closePrice) + (dayRange * 0.6);
    const lowPrice = Math.min(openPrice, closePrice) - (dayRange * 0.4);
    
    // Í±∞ÎûòÎüâ (ÏãúÍ∞ÄÏ¥ùÏï°Í≥º Î≥ÄÎèôÏÑ±Ïóê ÎπÑÎ°Ä)
    const baseVolume = startPrice > 1000 ? 200000 : startPrice > 100 ? 800000 : 1500000;
    const volatilityMultiplier = 1 + Math.abs(totalChange) * 5;
    const volume = Math.floor(baseVolume * volatilityMultiplier * (0.5 + Math.random()));
    
    const success = insertStockPrice(ticker, dateStr, openPrice, highPrice, lowPrice, closePrice, volume);
    if (success) successCount++;
    
    currentPrice = closePrice;
  }
  
  const finalReturn = ((currentPrice - startPrice) / startPrice * 100);
  console.log(`‚úÖ ${ticker}: ${successCount}/${days}Ïùº ÏÉùÏÑ±ÏôÑÎ£å, Ïó∞ÏàòÏùµÎ•†: ${finalReturn.toFixed(2)}%, ÏµúÏ¢ÖÍ∞Ä: ${currentPrice.toFixed(2)}`);
  
  return successCount;
}

// Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°± Ï¢ÖÎ™© Î™©Î°ù Ï°∞Ìöå
function getMissingPriceStocks() {
  const stmt = db.prepare(`
    SELECT DISTINCT s.ticker, s.company_name, s.market, s.mention_count,
           COUNT(sp.ticker) as price_count
    FROM stocks s 
    LEFT JOIN stock_prices sp ON s.ticker = sp.ticker
    WHERE s.mention_count > 0 
    GROUP BY s.ticker
    HAVING price_count < 100
    ORDER BY s.mention_count DESC, s.ticker
  `);
  
  return stmt.all();
}

async function main() {
  console.log('üöÄ Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°± Ï¢ÖÎ™©Îì§ 1ÎÖÑÏπò ÌòÑÏã§Ï†Å Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏãúÏûë (2Ï∞®)');
  console.log('üìÖ Í∏∞Í∞Ñ: 2024-08-24 ~ 2025-08-24 (365Ïùº)');
  
  const missingStocks = getMissingPriceStocks();
  console.log(`üìä ÎåÄÏÉÅ Ï¢ÖÎ™©: ${missingStocks.length}Í∞ú\n`);
  
  missingStocks.forEach(stock => {
    console.log(`üìã ${stock.ticker} (${stock.company_name}) - Ïñ∏Í∏â ${stock.mention_count}Ìöå, ÌòÑÏû¨ Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞: ${stock.price_count}Í∞ú`);
  });
  console.log('');
  
  let totalGenerated = 0;
  let totalDays = 0;
  
  for (const stock of missingStocks) {
    const startPrice = REALISTIC_START_PRICES_BATCH_2[stock.ticker];
    
    if (!startPrice) {
      console.log(`‚ö†Ô∏è ${stock.ticker}: ÏãúÏûëÍ∞Ä ÎØ∏ÏÑ§Ï†ï, Í±¥ÎÑàÎúÄ`);
      continue;
    }
    
    const generated = generateRealisticPriceData(
      stock.ticker, 
      stock.market, 
      startPrice, 
      365
    );
    
    totalGenerated += generated;
    totalDays += 365;
    
    // ÏßßÏùÄ ÏßÄÏó∞ (DB Î∂ÄÌïò Î∞©ÏßÄ)
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log(`\nüéâ Ï†ÑÏ≤¥ ÏôÑÎ£å!`);
  console.log(`üìà ÏÉùÏÑ±Îêú Îç∞Ïù¥ÌÑ∞: ${totalGenerated}/${totalDays}Ïùº (${(totalGenerated/totalDays*100).toFixed(1)}%)`);
  console.log(`üíæ Ï¥ù ${totalGenerated}Í∞ú Í∞ÄÍ≤© Î†àÏΩîÎìúÍ∞Ä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.`);
  
  // Í≤∞Í≥º Í≤ÄÏ¶ù
  console.log('\nüîç ÏÉùÏÑ± Í≤∞Í≥º Í≤ÄÏ¶ù:');
  const verifyStmt = db.prepare(`
    SELECT s.ticker, s.company_name, COUNT(sp.ticker) as price_count
    FROM stocks s 
    LEFT JOIN stock_prices sp ON s.ticker = sp.ticker
    WHERE s.ticker IN ('HD', '003550', 'AMZN', 'LLY', 'META', '373220', 'UNH', '035720', 'JPM')
    GROUP BY s.ticker
    ORDER BY s.ticker
  `);
  const results = verifyStmt.all();
  
  results.forEach(result => {
    const status = result.price_count >= 365 ? '‚úÖ' : '‚ö†Ô∏è';
    console.log(`${status} ${result.ticker} (${result.company_name}): ${result.price_count}Í∞ú Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞`);
  });
  
  db.close();
}

if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
    db.close();
  });
}